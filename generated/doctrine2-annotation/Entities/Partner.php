<?php

/**
 * Auto generated by MySQL Workbench Schema Exporter.
 * Version 3.0.2 (doctrine2-annotation) on 2016-06-25 03:44:07.
 * Goto https://github.com/johmue/mysql-workbench-schema-exporter for more
 * information.
 */

namespace ErpNET\App\Models\Doctrine\Entities;

use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;

/**
 * ErpNET\App\Models\Doctrine\Entities\Partner
 *
 * @ORM\Entity(repositoryClass="PartnerRepository")
 * @ORM\Table(name="partners", indexes={@ORM\Index(name="partners_mandante_index", columns={"mandante"}), @ORM\Index(name="partners_user_id_index", columns={"user_id"}), @ORM\Index(name="partners_old_id_index", columns={"old_id"}), @ORM\Index(name="partners_deleted_at_index", columns={"deleted_at"})})
 */
class Partner
{
    /**
     * @ORM\Id
     * @ORM\Column(type="integer", options={"unsigned":true})
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    protected $id;

    /**
     * @ORM\Column(type="datetime")
     */
    protected $created_at;

    /**
     * @ORM\Column(type="datetime")
     */
    protected $updated_at;

    /**
     * @ORM\Column(type="datetime", nullable=true)
     */
    protected $deleted_at;

    /**
     * @ORM\Column(type="string", length=255)
     */
    protected $mandante;

    /**
     * @ORM\Column(type="integer", nullable=true, options={"unsigned":true})
     */
    protected $user_id;

    /**
     * @ORM\Column(type="string", length=255)
     */
    protected $nome;

    /**
     * @ORM\Column(type="datetime", nullable=true)
     */
    protected $data_nascimento;

    /**
     * @ORM\Column(type="string", length=255, nullable=true)
     */
    protected $observacao;

    /**
     * @ORM\Column(type="integer", nullable=true)
     */
    protected $old_id;

    /**
     * @ORM\OneToMany(targetEntity="Address", mappedBy="partner")
     * @ORM\JoinColumn(name="id", referencedColumnName="partner_id", nullable=false)
     */
    protected $addresses;

    /**
     * @ORM\OneToMany(targetEntity="Contact", mappedBy="partner")
     * @ORM\JoinColumn(name="id", referencedColumnName="partner_id", nullable=false)
     */
    protected $contacts;

    /**
     * @ORM\OneToMany(targetEntity="Document", mappedBy="partner")
     * @ORM\JoinColumn(name="id", referencedColumnName="partner_id", nullable=false)
     */
    protected $documents;

    /**
     * @ORM\OneToMany(targetEntity="Order", mappedBy="partner")
     * @ORM\JoinColumn(name="id", referencedColumnName="partner_id", nullable=false)
     */
    protected $orders;

    /**
     * @ORM\OneToMany(targetEntity="PartnerPartnerGroup", mappedBy="partner")
     * @ORM\JoinColumn(name="id", referencedColumnName="partner_id", nullable=false)
     */
    protected $partnerPartnerGroups;

    /**
     * @ORM\OneToMany(targetEntity="PartnerSharedStat", mappedBy="partner")
     * @ORM\JoinColumn(name="id", referencedColumnName="partner_id", nullable=false)
     */
    protected $partnerSharedStats;

    /**
     * @ORM\OneToOne(targetEntity="User", inversedBy="partner")
     * @ORM\JoinColumn(name="user_id", referencedColumnName="id")
     */
    protected $user;

    public function __construct()
    {
        $this->addresses = new ArrayCollection();
        $this->contacts = new ArrayCollection();
        $this->documents = new ArrayCollection();
        $this->orders = new ArrayCollection();
        $this->partnerPartnerGroups = new ArrayCollection();
        $this->partnerSharedStats = new ArrayCollection();
    }

    /**
     * Set the value of id.
     *
     * @param integer $id
     * @return \ErpNET\App\Models\Doctrine\Entities\Partner
     */
    public function setId($id)
    {
        $this->id = $id;

        return $this;
    }

    /**
     * Get the value of id.
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set the value of created_at.
     *
     * @param \DateTime $created_at
     * @return \ErpNET\App\Models\Doctrine\Entities\Partner
     */
    public function setCreatedAt($created_at)
    {
        $this->created_at = $created_at;

        return $this;
    }

    /**
     * Get the value of created_at.
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->created_at;
    }

    /**
     * Set the value of updated_at.
     *
     * @param \DateTime $updated_at
     * @return \ErpNET\App\Models\Doctrine\Entities\Partner
     */
    public function setUpdatedAt($updated_at)
    {
        $this->updated_at = $updated_at;

        return $this;
    }

    /**
     * Get the value of updated_at.
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->updated_at;
    }

    /**
     * Set the value of deleted_at.
     *
     * @param \DateTime $deleted_at
     * @return \ErpNET\App\Models\Doctrine\Entities\Partner
     */
    public function setDeletedAt($deleted_at)
    {
        $this->deleted_at = $deleted_at;

        return $this;
    }

    /**
     * Get the value of deleted_at.
     *
     * @return \DateTime
     */
    public function getDeletedAt()
    {
        return $this->deleted_at;
    }

    /**
     * Set the value of mandante.
     *
     * @param string $mandante
     * @return \ErpNET\App\Models\Doctrine\Entities\Partner
     */
    public function setMandante($mandante)
    {
        $this->mandante = $mandante;

        return $this;
    }

    /**
     * Get the value of mandante.
     *
     * @return string
     */
    public function getMandante()
    {
        return $this->mandante;
    }

    /**
     * Set the value of user_id.
     *
     * @param integer $user_id
     * @return \ErpNET\App\Models\Doctrine\Entities\Partner
     */
    public function setUserId($user_id)
    {
        $this->user_id = $user_id;

        return $this;
    }

    /**
     * Get the value of user_id.
     *
     * @return integer
     */
    public function getUserId()
    {
        return $this->user_id;
    }

    /**
     * Set the value of nome.
     *
     * @param string $nome
     * @return \ErpNET\App\Models\Doctrine\Entities\Partner
     */
    public function setNome($nome)
    {
        $this->nome = $nome;

        return $this;
    }

    /**
     * Get the value of nome.
     *
     * @return string
     */
    public function getNome()
    {
        return $this->nome;
    }

    /**
     * Set the value of data_nascimento.
     *
     * @param \DateTime $data_nascimento
     * @return \ErpNET\App\Models\Doctrine\Entities\Partner
     */
    public function setDataNascimento($data_nascimento)
    {
        $this->data_nascimento = $data_nascimento;

        return $this;
    }

    /**
     * Get the value of data_nascimento.
     *
     * @return \DateTime
     */
    public function getDataNascimento()
    {
        return $this->data_nascimento;
    }

    /**
     * Set the value of observacao.
     *
     * @param string $observacao
     * @return \ErpNET\App\Models\Doctrine\Entities\Partner
     */
    public function setObservacao($observacao)
    {
        $this->observacao = $observacao;

        return $this;
    }

    /**
     * Get the value of observacao.
     *
     * @return string
     */
    public function getObservacao()
    {
        return $this->observacao;
    }

    /**
     * Set the value of old_id.
     *
     * @param integer $old_id
     * @return \ErpNET\App\Models\Doctrine\Entities\Partner
     */
    public function setOldId($old_id)
    {
        $this->old_id = $old_id;

        return $this;
    }

    /**
     * Get the value of old_id.
     *
     * @return integer
     */
    public function getOldId()
    {
        return $this->old_id;
    }

    /**
     * Add Address entity to collection (one to many).
     *
     * @param \ErpNET\App\Models\Doctrine\Entities\Address $address
     * @return \ErpNET\App\Models\Doctrine\Entities\Partner
     */
    public function addAddress(Address $address)
    {
        $this->addresses[] = $address;

        return $this;
    }

    /**
     * Remove Address entity from collection (one to many).
     *
     * @param \ErpNET\App\Models\Doctrine\Entities\Address $address
     * @return \ErpNET\App\Models\Doctrine\Entities\Partner
     */
    public function removeAddress(Address $address)
    {
        $this->addresses->removeElement($address);

        return $this;
    }

    /**
     * Get Address entity collection (one to many).
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getAddresses()
    {
        return $this->addresses;
    }

    /**
     * Add Contact entity to collection (one to many).
     *
     * @param \ErpNET\App\Models\Doctrine\Entities\Contact $contact
     * @return \ErpNET\App\Models\Doctrine\Entities\Partner
     */
    public function addContact(Contact $contact)
    {
        $this->contacts[] = $contact;

        return $this;
    }

    /**
     * Remove Contact entity from collection (one to many).
     *
     * @param \ErpNET\App\Models\Doctrine\Entities\Contact $contact
     * @return \ErpNET\App\Models\Doctrine\Entities\Partner
     */
    public function removeContact(Contact $contact)
    {
        $this->contacts->removeElement($contact);

        return $this;
    }

    /**
     * Get Contact entity collection (one to many).
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getContacts()
    {
        return $this->contacts;
    }

    /**
     * Add Document entity to collection (one to many).
     *
     * @param \ErpNET\App\Models\Doctrine\Entities\Document $document
     * @return \ErpNET\App\Models\Doctrine\Entities\Partner
     */
    public function addDocument(Document $document)
    {
        $this->documents[] = $document;

        return $this;
    }

    /**
     * Remove Document entity from collection (one to many).
     *
     * @param \ErpNET\App\Models\Doctrine\Entities\Document $document
     * @return \ErpNET\App\Models\Doctrine\Entities\Partner
     */
    public function removeDocument(Document $document)
    {
        $this->documents->removeElement($document);

        return $this;
    }

    /**
     * Get Document entity collection (one to many).
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getDocuments()
    {
        return $this->documents;
    }

    /**
     * Add Order entity to collection (one to many).
     *
     * @param \ErpNET\App\Models\Doctrine\Entities\Order $order
     * @return \ErpNET\App\Models\Doctrine\Entities\Partner
     */
    public function addOrder(Order $order)
    {
        $this->orders[] = $order;

        return $this;
    }

    /**
     * Remove Order entity from collection (one to many).
     *
     * @param \ErpNET\App\Models\Doctrine\Entities\Order $order
     * @return \ErpNET\App\Models\Doctrine\Entities\Partner
     */
    public function removeOrder(Order $order)
    {
        $this->orders->removeElement($order);

        return $this;
    }

    /**
     * Get Order entity collection (one to many).
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getOrders()
    {
        return $this->orders;
    }

    /**
     * Add PartnerPartnerGroup entity to collection (one to many).
     *
     * @param \ErpNET\App\Models\Doctrine\Entities\PartnerPartnerGroup $partnerPartnerGroup
     * @return \ErpNET\App\Models\Doctrine\Entities\Partner
     */
    public function addPartnerPartnerGroup(PartnerPartnerGroup $partnerPartnerGroup)
    {
        $this->partnerPartnerGroups[] = $partnerPartnerGroup;

        return $this;
    }

    /**
     * Remove PartnerPartnerGroup entity from collection (one to many).
     *
     * @param \ErpNET\App\Models\Doctrine\Entities\PartnerPartnerGroup $partnerPartnerGroup
     * @return \ErpNET\App\Models\Doctrine\Entities\Partner
     */
    public function removePartnerPartnerGroup(PartnerPartnerGroup $partnerPartnerGroup)
    {
        $this->partnerPartnerGroups->removeElement($partnerPartnerGroup);

        return $this;
    }

    /**
     * Get PartnerPartnerGroup entity collection (one to many).
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getPartnerPartnerGroups()
    {
        return $this->partnerPartnerGroups;
    }

    /**
     * Add PartnerSharedStat entity to collection (one to many).
     *
     * @param \ErpNET\App\Models\Doctrine\Entities\PartnerSharedStat $partnerSharedStat
     * @return \ErpNET\App\Models\Doctrine\Entities\Partner
     */
    public function addPartnerSharedStat(PartnerSharedStat $partnerSharedStat)
    {
        $this->partnerSharedStats[] = $partnerSharedStat;

        return $this;
    }

    /**
     * Remove PartnerSharedStat entity from collection (one to many).
     *
     * @param \ErpNET\App\Models\Doctrine\Entities\PartnerSharedStat $partnerSharedStat
     * @return \ErpNET\App\Models\Doctrine\Entities\Partner
     */
    public function removePartnerSharedStat(PartnerSharedStat $partnerSharedStat)
    {
        $this->partnerSharedStats->removeElement($partnerSharedStat);

        return $this;
    }

    /**
     * Get PartnerSharedStat entity collection (one to many).
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getPartnerSharedStats()
    {
        return $this->partnerSharedStats;
    }

    /**
     * Set User entity (one to one).
     *
     * @param \ErpNET\App\Models\Doctrine\Entities\User $user
     * @return \ErpNET\App\Models\Doctrine\Entities\Partner
     */
    public function setUser(User $user)
    {
        $this->user = $user;

        return $this;
    }

    /**
     * Get User entity (one to one).
     *
     * @return \ErpNET\App\Models\Doctrine\Entities\User
     */
    public function getUser()
    {
        return $this->user;
    }

    public function __sleep()
    {
        return array('id', 'created_at', 'updated_at', 'deleted_at', 'mandante', 'user_id', 'nome', 'data_nascimento', 'observacao', 'old_id');
    }
}