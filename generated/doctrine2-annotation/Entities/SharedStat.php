<?php

/**
 * Auto generated by MySQL Workbench Schema Exporter.
 * Version 3.0.2 (doctrine2-annotation) on 2016-05-23 15:00:59.
 * Goto https://github.com/johmue/mysql-workbench-schema-exporter for more
 * information.
 */

namespace ErpNET\App\Models\Doctrine\Entities;

use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;

/**
 * ErpNET\App\Models\Doctrine\Entities\SharedStat
 *
 * @ORM\Entity(repositoryClass="SharedStatRepository")
 * @ORM\Table(name="shared_stats", indexes={@ORM\Index(name="shared_stats_status_index", columns={"`status`"})})
 */
class SharedStat
{
    /**
     * @ORM\Id
     * @ORM\Column(type="integer", options={"unsigned":true})
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    protected $id;

    /**
     * @ORM\Column(type="datetime")
     */
    protected $created_at;

    /**
     * @ORM\Column(type="datetime")
     */
    protected $updated_at;

    /**
     * @ORM\Column(type="datetime", nullable=true)
     */
    protected $deleted_at;

    /**
     * @ORM\Column(name="`status`", type="string", length=255)
     */
    protected $status;

    /**
     * @ORM\Column(type="string", length=255, nullable=true)
     */
    protected $descricao;

    /**
     * @ORM\OneToMany(targetEntity="CostAllocateSharedStat", mappedBy="sharedStat")
     * @ORM\JoinColumn(name="id", referencedColumnName="status_id", nullable=false)
     */
    protected $costAllocateSharedStats;

    /**
     * @ORM\OneToMany(targetEntity="ItemOrderSharedStat", mappedBy="sharedStat")
     * @ORM\JoinColumn(name="id", referencedColumnName="status_id", nullable=false)
     */
    protected $itemOrderSharedStats;

    /**
     * @ORM\OneToMany(targetEntity="OrderSharedStat", mappedBy="sharedStat")
     * @ORM\JoinColumn(name="id", referencedColumnName="shared_stat_id", nullable=false)
     */
    protected $orderSharedStats;

    /**
     * @ORM\OneToMany(targetEntity="PartnerSharedStat", mappedBy="sharedStat")
     * @ORM\JoinColumn(name="id", referencedColumnName="shared_stat_id", nullable=false)
     */
    protected $partnerSharedStats;

    /**
     * @ORM\OneToMany(targetEntity="ProductSharedStat", mappedBy="sharedStat")
     * @ORM\JoinColumn(name="id", referencedColumnName="shared_stat_id", nullable=false)
     */
    protected $productSharedStats;

    public function __construct()
    {
        $this->costAllocateSharedStats = new ArrayCollection();
        $this->itemOrderSharedStats = new ArrayCollection();
        $this->orderSharedStats = new ArrayCollection();
        $this->partnerSharedStats = new ArrayCollection();
        $this->productSharedStats = new ArrayCollection();
    }

    /**
     * Set the value of id.
     *
     * @param integer $id
     * @return \ErpNET\App\Models\Doctrine\Entities\SharedStat
     */
    public function setId($id)
    {
        $this->id = $id;

        return $this;
    }

    /**
     * Get the value of id.
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set the value of created_at.
     *
     * @param \DateTime $created_at
     * @return \ErpNET\App\Models\Doctrine\Entities\SharedStat
     */
    public function setCreatedAt($created_at)
    {
        $this->created_at = $created_at;

        return $this;
    }

    /**
     * Get the value of created_at.
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->created_at;
    }

    /**
     * Set the value of updated_at.
     *
     * @param \DateTime $updated_at
     * @return \ErpNET\App\Models\Doctrine\Entities\SharedStat
     */
    public function setUpdatedAt($updated_at)
    {
        $this->updated_at = $updated_at;

        return $this;
    }

    /**
     * Get the value of updated_at.
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->updated_at;
    }

    /**
     * Set the value of deleted_at.
     *
     * @param \DateTime $deleted_at
     * @return \ErpNET\App\Models\Doctrine\Entities\SharedStat
     */
    public function setDeletedAt($deleted_at)
    {
        $this->deleted_at = $deleted_at;

        return $this;
    }

    /**
     * Get the value of deleted_at.
     *
     * @return \DateTime
     */
    public function getDeletedAt()
    {
        return $this->deleted_at;
    }

    /**
     * Set the value of status.
     *
     * @param string $status
     * @return \ErpNET\App\Models\Doctrine\Entities\SharedStat
     */
    public function setStatus($status)
    {
        $this->status = $status;

        return $this;
    }

    /**
     * Get the value of status.
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->status;
    }

    /**
     * Set the value of descricao.
     *
     * @param string $descricao
     * @return \ErpNET\App\Models\Doctrine\Entities\SharedStat
     */
    public function setDescricao($descricao)
    {
        $this->descricao = $descricao;

        return $this;
    }

    /**
     * Get the value of descricao.
     *
     * @return string
     */
    public function getDescricao()
    {
        return $this->descricao;
    }

    /**
     * Add CostAllocateSharedStat entity to collection (one to many).
     *
     * @param \ErpNET\App\Models\Doctrine\Entities\CostAllocateSharedStat $costAllocateSharedStat
     * @return \ErpNET\App\Models\Doctrine\Entities\SharedStat
     */
    public function addCostAllocateSharedStat(CostAllocateSharedStat $costAllocateSharedStat)
    {
        $this->costAllocateSharedStats[] = $costAllocateSharedStat;

        return $this;
    }

    /**
     * Remove CostAllocateSharedStat entity from collection (one to many).
     *
     * @param \ErpNET\App\Models\Doctrine\Entities\CostAllocateSharedStat $costAllocateSharedStat
     * @return \ErpNET\App\Models\Doctrine\Entities\SharedStat
     */
    public function removeCostAllocateSharedStat(CostAllocateSharedStat $costAllocateSharedStat)
    {
        $this->costAllocateSharedStats->removeElement($costAllocateSharedStat);

        return $this;
    }

    /**
     * Get CostAllocateSharedStat entity collection (one to many).
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getCostAllocateSharedStats()
    {
        return $this->costAllocateSharedStats;
    }

    /**
     * Add ItemOrderSharedStat entity to collection (one to many).
     *
     * @param \ErpNET\App\Models\Doctrine\Entities\ItemOrderSharedStat $itemOrderSharedStat
     * @return \ErpNET\App\Models\Doctrine\Entities\SharedStat
     */
    public function addItemOrderSharedStat(ItemOrderSharedStat $itemOrderSharedStat)
    {
        $this->itemOrderSharedStats[] = $itemOrderSharedStat;

        return $this;
    }

    /**
     * Remove ItemOrderSharedStat entity from collection (one to many).
     *
     * @param \ErpNET\App\Models\Doctrine\Entities\ItemOrderSharedStat $itemOrderSharedStat
     * @return \ErpNET\App\Models\Doctrine\Entities\SharedStat
     */
    public function removeItemOrderSharedStat(ItemOrderSharedStat $itemOrderSharedStat)
    {
        $this->itemOrderSharedStats->removeElement($itemOrderSharedStat);

        return $this;
    }

    /**
     * Get ItemOrderSharedStat entity collection (one to many).
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getItemOrderSharedStats()
    {
        return $this->itemOrderSharedStats;
    }

    /**
     * Add OrderSharedStat entity to collection (one to many).
     *
     * @param \ErpNET\App\Models\Doctrine\Entities\OrderSharedStat $orderSharedStat
     * @return \ErpNET\App\Models\Doctrine\Entities\SharedStat
     */
    public function addOrderSharedStat(OrderSharedStat $orderSharedStat)
    {
        $this->orderSharedStats[] = $orderSharedStat;

        return $this;
    }

    /**
     * Remove OrderSharedStat entity from collection (one to many).
     *
     * @param \ErpNET\App\Models\Doctrine\Entities\OrderSharedStat $orderSharedStat
     * @return \ErpNET\App\Models\Doctrine\Entities\SharedStat
     */
    public function removeOrderSharedStat(OrderSharedStat $orderSharedStat)
    {
        $this->orderSharedStats->removeElement($orderSharedStat);

        return $this;
    }

    /**
     * Get OrderSharedStat entity collection (one to many).
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getOrderSharedStats()
    {
        return $this->orderSharedStats;
    }

    /**
     * Add PartnerSharedStat entity to collection (one to many).
     *
     * @param \ErpNET\App\Models\Doctrine\Entities\PartnerSharedStat $partnerSharedStat
     * @return \ErpNET\App\Models\Doctrine\Entities\SharedStat
     */
    public function addPartnerSharedStat(PartnerSharedStat $partnerSharedStat)
    {
        $this->partnerSharedStats[] = $partnerSharedStat;

        return $this;
    }

    /**
     * Remove PartnerSharedStat entity from collection (one to many).
     *
     * @param \ErpNET\App\Models\Doctrine\Entities\PartnerSharedStat $partnerSharedStat
     * @return \ErpNET\App\Models\Doctrine\Entities\SharedStat
     */
    public function removePartnerSharedStat(PartnerSharedStat $partnerSharedStat)
    {
        $this->partnerSharedStats->removeElement($partnerSharedStat);

        return $this;
    }

    /**
     * Get PartnerSharedStat entity collection (one to many).
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getPartnerSharedStats()
    {
        return $this->partnerSharedStats;
    }

    /**
     * Add ProductSharedStat entity to collection (one to many).
     *
     * @param \ErpNET\App\Models\Doctrine\Entities\ProductSharedStat $productSharedStat
     * @return \ErpNET\App\Models\Doctrine\Entities\SharedStat
     */
    public function addProductSharedStat(ProductSharedStat $productSharedStat)
    {
        $this->productSharedStats[] = $productSharedStat;

        return $this;
    }

    /**
     * Remove ProductSharedStat entity from collection (one to many).
     *
     * @param \ErpNET\App\Models\Doctrine\Entities\ProductSharedStat $productSharedStat
     * @return \ErpNET\App\Models\Doctrine\Entities\SharedStat
     */
    public function removeProductSharedStat(ProductSharedStat $productSharedStat)
    {
        $this->productSharedStats->removeElement($productSharedStat);

        return $this;
    }

    /**
     * Get ProductSharedStat entity collection (one to many).
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getProductSharedStats()
    {
        return $this->productSharedStats;
    }

    public function __sleep()
    {
        return array('id', 'created_at', 'updated_at', 'deleted_at', 'status', 'descricao');
    }
}