<?php

/**
 * Auto generated by MySQL Workbench Schema Exporter.
 * Version 3.0.2 (doctrine2-annotation) on 2016-05-23 15:00:59.
 * Goto https://github.com/johmue/mysql-workbench-schema-exporter for more
 * information.
 */

namespace ErpNET\App\Models\Doctrine\Entities;

use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;

/**
 * ErpNET\App\Models\Doctrine\Entities\CostAllocate
 *
 * @ORM\Entity(repositoryClass="CostAllocateRepository")
 * @ORM\Table(name="cost_allocates", indexes={@ORM\Index(name="cost_allocates_mandante_index", columns={"mandante"}), @ORM\Index(name="cost_allocates_deleted_at_index", columns={"deleted_at"})})
 */
class CostAllocate
{
    /**
     * @ORM\Id
     * @ORM\Column(type="integer", options={"unsigned":true})
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    protected $id;

    /**
     * @ORM\Column(type="datetime")
     */
    protected $created_at;

    /**
     * @ORM\Column(type="datetime")
     */
    protected $updated_at;

    /**
     * @ORM\Column(type="datetime", nullable=true)
     */
    protected $deleted_at;

    /**
     * @ORM\Column(type="string", length=255)
     */
    protected $mandante;

    /**
     * @ORM\Column(type="integer", nullable=true, options={"unsigned":true})
     */
    protected $id_superior;

    /**
     * @ORM\Column(type="string", length=255)
     */
    protected $numero;

    /**
     * @ORM\Column(type="string", length=255)
     */
    protected $nome;

    /**
     * @ORM\Column(type="string", length=255)
     */
    protected $descricao;

    /**
     * @ORM\OneToMany(targetEntity="CostAllocateSharedStat", mappedBy="costAllocate")
     * @ORM\JoinColumn(name="id", referencedColumnName="cost_allocate_id", nullable=false)
     */
    protected $costAllocateSharedStats;

    /**
     * @ORM\OneToMany(targetEntity="ItemOrder", mappedBy="costAllocate")
     * @ORM\JoinColumn(name="id", referencedColumnName="cost_id", nullable=false)
     */
    protected $itemOrders;

    /**
     * @ORM\OneToMany(targetEntity="Product", mappedBy="costAllocate")
     * @ORM\JoinColumn(name="id", referencedColumnName="cost_id", nullable=false)
     */
    protected $products;

    public function __construct()
    {
        $this->costAllocateSharedStats = new ArrayCollection();
        $this->itemOrders = new ArrayCollection();
        $this->products = new ArrayCollection();
    }

    /**
     * Set the value of id.
     *
     * @param integer $id
     * @return \ErpNET\App\Models\Doctrine\Entities\CostAllocate
     */
    public function setId($id)
    {
        $this->id = $id;

        return $this;
    }

    /**
     * Get the value of id.
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set the value of created_at.
     *
     * @param \DateTime $created_at
     * @return \ErpNET\App\Models\Doctrine\Entities\CostAllocate
     */
    public function setCreatedAt($created_at)
    {
        $this->created_at = $created_at;

        return $this;
    }

    /**
     * Get the value of created_at.
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->created_at;
    }

    /**
     * Set the value of updated_at.
     *
     * @param \DateTime $updated_at
     * @return \ErpNET\App\Models\Doctrine\Entities\CostAllocate
     */
    public function setUpdatedAt($updated_at)
    {
        $this->updated_at = $updated_at;

        return $this;
    }

    /**
     * Get the value of updated_at.
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->updated_at;
    }

    /**
     * Set the value of deleted_at.
     *
     * @param \DateTime $deleted_at
     * @return \ErpNET\App\Models\Doctrine\Entities\CostAllocate
     */
    public function setDeletedAt($deleted_at)
    {
        $this->deleted_at = $deleted_at;

        return $this;
    }

    /**
     * Get the value of deleted_at.
     *
     * @return \DateTime
     */
    public function getDeletedAt()
    {
        return $this->deleted_at;
    }

    /**
     * Set the value of mandante.
     *
     * @param string $mandante
     * @return \ErpNET\App\Models\Doctrine\Entities\CostAllocate
     */
    public function setMandante($mandante)
    {
        $this->mandante = $mandante;

        return $this;
    }

    /**
     * Get the value of mandante.
     *
     * @return string
     */
    public function getMandante()
    {
        return $this->mandante;
    }

    /**
     * Set the value of id_superior.
     *
     * @param integer $id_superior
     * @return \ErpNET\App\Models\Doctrine\Entities\CostAllocate
     */
    public function setIdSuperior($id_superior)
    {
        $this->id_superior = $id_superior;

        return $this;
    }

    /**
     * Get the value of id_superior.
     *
     * @return integer
     */
    public function getIdSuperior()
    {
        return $this->id_superior;
    }

    /**
     * Set the value of numero.
     *
     * @param string $numero
     * @return \ErpNET\App\Models\Doctrine\Entities\CostAllocate
     */
    public function setNumero($numero)
    {
        $this->numero = $numero;

        return $this;
    }

    /**
     * Get the value of numero.
     *
     * @return string
     */
    public function getNumero()
    {
        return $this->numero;
    }

    /**
     * Set the value of nome.
     *
     * @param string $nome
     * @return \ErpNET\App\Models\Doctrine\Entities\CostAllocate
     */
    public function setNome($nome)
    {
        $this->nome = $nome;

        return $this;
    }

    /**
     * Get the value of nome.
     *
     * @return string
     */
    public function getNome()
    {
        return $this->nome;
    }

    /**
     * Set the value of descricao.
     *
     * @param string $descricao
     * @return \ErpNET\App\Models\Doctrine\Entities\CostAllocate
     */
    public function setDescricao($descricao)
    {
        $this->descricao = $descricao;

        return $this;
    }

    /**
     * Get the value of descricao.
     *
     * @return string
     */
    public function getDescricao()
    {
        return $this->descricao;
    }

    /**
     * Add CostAllocateSharedStat entity to collection (one to many).
     *
     * @param \ErpNET\App\Models\Doctrine\Entities\CostAllocateSharedStat $costAllocateSharedStat
     * @return \ErpNET\App\Models\Doctrine\Entities\CostAllocate
     */
    public function addCostAllocateSharedStat(CostAllocateSharedStat $costAllocateSharedStat)
    {
        $this->costAllocateSharedStats[] = $costAllocateSharedStat;

        return $this;
    }

    /**
     * Remove CostAllocateSharedStat entity from collection (one to many).
     *
     * @param \ErpNET\App\Models\Doctrine\Entities\CostAllocateSharedStat $costAllocateSharedStat
     * @return \ErpNET\App\Models\Doctrine\Entities\CostAllocate
     */
    public function removeCostAllocateSharedStat(CostAllocateSharedStat $costAllocateSharedStat)
    {
        $this->costAllocateSharedStats->removeElement($costAllocateSharedStat);

        return $this;
    }

    /**
     * Get CostAllocateSharedStat entity collection (one to many).
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getCostAllocateSharedStats()
    {
        return $this->costAllocateSharedStats;
    }

    /**
     * Add ItemOrder entity to collection (one to many).
     *
     * @param \ErpNET\App\Models\Doctrine\Entities\ItemOrder $itemOrder
     * @return \ErpNET\App\Models\Doctrine\Entities\CostAllocate
     */
    public function addItemOrder(ItemOrder $itemOrder)
    {
        $this->itemOrders[] = $itemOrder;

        return $this;
    }

    /**
     * Remove ItemOrder entity from collection (one to many).
     *
     * @param \ErpNET\App\Models\Doctrine\Entities\ItemOrder $itemOrder
     * @return \ErpNET\App\Models\Doctrine\Entities\CostAllocate
     */
    public function removeItemOrder(ItemOrder $itemOrder)
    {
        $this->itemOrders->removeElement($itemOrder);

        return $this;
    }

    /**
     * Get ItemOrder entity collection (one to many).
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getItemOrders()
    {
        return $this->itemOrders;
    }

    /**
     * Add Product entity to collection (one to many).
     *
     * @param \ErpNET\App\Models\Doctrine\Entities\Product $product
     * @return \ErpNET\App\Models\Doctrine\Entities\CostAllocate
     */
    public function addProduct(Product $product)
    {
        $this->products[] = $product;

        return $this;
    }

    /**
     * Remove Product entity from collection (one to many).
     *
     * @param \ErpNET\App\Models\Doctrine\Entities\Product $product
     * @return \ErpNET\App\Models\Doctrine\Entities\CostAllocate
     */
    public function removeProduct(Product $product)
    {
        $this->products->removeElement($product);

        return $this;
    }

    /**
     * Get Product entity collection (one to many).
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getProducts()
    {
        return $this->products;
    }

    public function __sleep()
    {
        return array('id', 'created_at', 'updated_at', 'deleted_at', 'mandante', 'id_superior', 'numero', 'nome', 'descricao');
    }
}