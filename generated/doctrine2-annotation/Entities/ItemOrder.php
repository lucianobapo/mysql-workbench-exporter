<?php

/**
 * Auto generated by MySQL Workbench Schema Exporter.
 * Version 3.0.2 (doctrine2-annotation) on 2016-06-25 03:44:07.
 * Goto https://github.com/johmue/mysql-workbench-schema-exporter for more
 * information.
 */

namespace ErpNET\App\Models\Doctrine\Entities;

use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;

/**
 * ErpNET\App\Models\Doctrine\Entities\ItemOrder
 *
 * @ORM\Entity(repositoryClass="ItemOrderRepository")
 * @ORM\Table(name="item_orders", indexes={@ORM\Index(name="item_orders_mandante_index", columns={"mandante"}), @ORM\Index(name="item_orders_order_id_index", columns={"order_id"}), @ORM\Index(name="item_orders_cost_id_index", columns={"cost_id"}), @ORM\Index(name="item_orders_product_id_index", columns={"product_id"}), @ORM\Index(name="item_orders_currency_id_index", columns={"currency_id"}), @ORM\Index(name="item_orders_deleted_at_index", columns={"deleted_at"})})
 */
class ItemOrder
{
    /**
     * @ORM\Id
     * @ORM\Column(type="integer", options={"unsigned":true})
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    protected $id;

    /**
     * @ORM\Column(type="datetime")
     */
    protected $created_at;

    /**
     * @ORM\Column(type="datetime")
     */
    protected $updated_at;

    /**
     * @ORM\Column(type="datetime", nullable=true)
     */
    protected $deleted_at;

    /**
     * @ORM\Column(type="string", length=255)
     */
    protected $mandante;

    /**
     * @ORM\Column(type="integer", nullable=true, options={"unsigned":true})
     */
    protected $order_id;

    /**
     * @ORM\Column(type="integer", nullable=true, options={"unsigned":true})
     */
    protected $cost_id;

    /**
     * @ORM\Column(type="integer", nullable=true, options={"unsigned":true})
     */
    protected $product_id;

    /**
     * @ORM\Column(type="integer", nullable=true, options={"unsigned":true})
     */
    protected $currency_id;

    /**
     * @ORM\Column(type="float", precision=8, scale=2)
     */
    protected $quantidade;

    /**
     * @ORM\Column(type="float", precision=8, scale=2)
     */
    protected $valor_unitario;

    /**
     * @ORM\Column(type="float", precision=8, scale=2, nullable=true)
     */
    protected $desconto_unitario;

    /**
     * @ORM\Column(type="text", nullable=true)
     */
    protected $descricao;

    /**
     * @ORM\OneToMany(targetEntity="ItemOrderSharedStat", mappedBy="itemOrder")
     * @ORM\JoinColumn(name="id", referencedColumnName="item_id", nullable=false)
     */
    protected $itemOrderSharedStats;

    /**
     * @ORM\ManyToOne(targetEntity="Order", inversedBy="itemOrders")
     * @ORM\JoinColumn(name="order_id", referencedColumnName="id")
     */
    protected $order;

    /**
     * @ORM\ManyToOne(targetEntity="CostAllocate", inversedBy="itemOrders")
     * @ORM\JoinColumn(name="cost_id", referencedColumnName="id")
     */
    protected $costAllocate;

    /**
     * @ORM\ManyToOne(targetEntity="Product", inversedBy="itemOrders")
     * @ORM\JoinColumn(name="product_id", referencedColumnName="id")
     */
    protected $product;

    /**
     * @ORM\ManyToOne(targetEntity="SharedCurrency", inversedBy="itemOrders")
     * @ORM\JoinColumn(name="currency_id", referencedColumnName="id")
     */
    protected $sharedCurrency;

    public function __construct()
    {
        $this->itemOrderSharedStats = new ArrayCollection();
    }

    /**
     * Set the value of id.
     *
     * @param integer $id
     * @return \ErpNET\App\Models\Doctrine\Entities\ItemOrder
     */
    public function setId($id)
    {
        $this->id = $id;

        return $this;
    }

    /**
     * Get the value of id.
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set the value of created_at.
     *
     * @param \DateTime $created_at
     * @return \ErpNET\App\Models\Doctrine\Entities\ItemOrder
     */
    public function setCreatedAt($created_at)
    {
        $this->created_at = $created_at;

        return $this;
    }

    /**
     * Get the value of created_at.
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->created_at;
    }

    /**
     * Set the value of updated_at.
     *
     * @param \DateTime $updated_at
     * @return \ErpNET\App\Models\Doctrine\Entities\ItemOrder
     */
    public function setUpdatedAt($updated_at)
    {
        $this->updated_at = $updated_at;

        return $this;
    }

    /**
     * Get the value of updated_at.
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->updated_at;
    }

    /**
     * Set the value of deleted_at.
     *
     * @param \DateTime $deleted_at
     * @return \ErpNET\App\Models\Doctrine\Entities\ItemOrder
     */
    public function setDeletedAt($deleted_at)
    {
        $this->deleted_at = $deleted_at;

        return $this;
    }

    /**
     * Get the value of deleted_at.
     *
     * @return \DateTime
     */
    public function getDeletedAt()
    {
        return $this->deleted_at;
    }

    /**
     * Set the value of mandante.
     *
     * @param string $mandante
     * @return \ErpNET\App\Models\Doctrine\Entities\ItemOrder
     */
    public function setMandante($mandante)
    {
        $this->mandante = $mandante;

        return $this;
    }

    /**
     * Get the value of mandante.
     *
     * @return string
     */
    public function getMandante()
    {
        return $this->mandante;
    }

    /**
     * Set the value of order_id.
     *
     * @param integer $order_id
     * @return \ErpNET\App\Models\Doctrine\Entities\ItemOrder
     */
    public function setOrderId($order_id)
    {
        $this->order_id = $order_id;

        return $this;
    }

    /**
     * Get the value of order_id.
     *
     * @return integer
     */
    public function getOrderId()
    {
        return $this->order_id;
    }

    /**
     * Set the value of cost_id.
     *
     * @param integer $cost_id
     * @return \ErpNET\App\Models\Doctrine\Entities\ItemOrder
     */
    public function setCostId($cost_id)
    {
        $this->cost_id = $cost_id;

        return $this;
    }

    /**
     * Get the value of cost_id.
     *
     * @return integer
     */
    public function getCostId()
    {
        return $this->cost_id;
    }

    /**
     * Set the value of product_id.
     *
     * @param integer $product_id
     * @return \ErpNET\App\Models\Doctrine\Entities\ItemOrder
     */
    public function setProductId($product_id)
    {
        $this->product_id = $product_id;

        return $this;
    }

    /**
     * Get the value of product_id.
     *
     * @return integer
     */
    public function getProductId()
    {
        return $this->product_id;
    }

    /**
     * Set the value of currency_id.
     *
     * @param integer $currency_id
     * @return \ErpNET\App\Models\Doctrine\Entities\ItemOrder
     */
    public function setCurrencyId($currency_id)
    {
        $this->currency_id = $currency_id;

        return $this;
    }

    /**
     * Get the value of currency_id.
     *
     * @return integer
     */
    public function getCurrencyId()
    {
        return $this->currency_id;
    }

    /**
     * Set the value of quantidade.
     *
     * @param float $quantidade
     * @return \ErpNET\App\Models\Doctrine\Entities\ItemOrder
     */
    public function setQuantidade($quantidade)
    {
        $this->quantidade = $quantidade;

        return $this;
    }

    /**
     * Get the value of quantidade.
     *
     * @return float
     */
    public function getQuantidade()
    {
        return $this->quantidade;
    }

    /**
     * Set the value of valor_unitario.
     *
     * @param float $valor_unitario
     * @return \ErpNET\App\Models\Doctrine\Entities\ItemOrder
     */
    public function setValorUnitario($valor_unitario)
    {
        $this->valor_unitario = $valor_unitario;

        return $this;
    }

    /**
     * Get the value of valor_unitario.
     *
     * @return float
     */
    public function getValorUnitario()
    {
        return $this->valor_unitario;
    }

    /**
     * Set the value of desconto_unitario.
     *
     * @param float $desconto_unitario
     * @return \ErpNET\App\Models\Doctrine\Entities\ItemOrder
     */
    public function setDescontoUnitario($desconto_unitario)
    {
        $this->desconto_unitario = $desconto_unitario;

        return $this;
    }

    /**
     * Get the value of desconto_unitario.
     *
     * @return float
     */
    public function getDescontoUnitario()
    {
        return $this->desconto_unitario;
    }

    /**
     * Set the value of descricao.
     *
     * @param string $descricao
     * @return \ErpNET\App\Models\Doctrine\Entities\ItemOrder
     */
    public function setDescricao($descricao)
    {
        $this->descricao = $descricao;

        return $this;
    }

    /**
     * Get the value of descricao.
     *
     * @return string
     */
    public function getDescricao()
    {
        return $this->descricao;
    }

    /**
     * Add ItemOrderSharedStat entity to collection (one to many).
     *
     * @param \ErpNET\App\Models\Doctrine\Entities\ItemOrderSharedStat $itemOrderSharedStat
     * @return \ErpNET\App\Models\Doctrine\Entities\ItemOrder
     */
    public function addItemOrderSharedStat(ItemOrderSharedStat $itemOrderSharedStat)
    {
        $this->itemOrderSharedStats[] = $itemOrderSharedStat;

        return $this;
    }

    /**
     * Remove ItemOrderSharedStat entity from collection (one to many).
     *
     * @param \ErpNET\App\Models\Doctrine\Entities\ItemOrderSharedStat $itemOrderSharedStat
     * @return \ErpNET\App\Models\Doctrine\Entities\ItemOrder
     */
    public function removeItemOrderSharedStat(ItemOrderSharedStat $itemOrderSharedStat)
    {
        $this->itemOrderSharedStats->removeElement($itemOrderSharedStat);

        return $this;
    }

    /**
     * Get ItemOrderSharedStat entity collection (one to many).
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getItemOrderSharedStats()
    {
        return $this->itemOrderSharedStats;
    }

    /**
     * Set Order entity (many to one).
     *
     * @param \ErpNET\App\Models\Doctrine\Entities\Order $order
     * @return \ErpNET\App\Models\Doctrine\Entities\ItemOrder
     */
    public function setOrder(Order $order = null)
    {
        $this->order = $order;

        return $this;
    }

    /**
     * Get Order entity (many to one).
     *
     * @return \ErpNET\App\Models\Doctrine\Entities\Order
     */
    public function getOrder()
    {
        return $this->order;
    }

    /**
     * Set CostAllocate entity (many to one).
     *
     * @param \ErpNET\App\Models\Doctrine\Entities\CostAllocate $costAllocate
     * @return \ErpNET\App\Models\Doctrine\Entities\ItemOrder
     */
    public function setCostAllocate(CostAllocate $costAllocate = null)
    {
        $this->costAllocate = $costAllocate;

        return $this;
    }

    /**
     * Get CostAllocate entity (many to one).
     *
     * @return \ErpNET\App\Models\Doctrine\Entities\CostAllocate
     */
    public function getCostAllocate()
    {
        return $this->costAllocate;
    }

    /**
     * Set Product entity (many to one).
     *
     * @param \ErpNET\App\Models\Doctrine\Entities\Product $product
     * @return \ErpNET\App\Models\Doctrine\Entities\ItemOrder
     */
    public function setProduct(Product $product = null)
    {
        $this->product = $product;

        return $this;
    }

    /**
     * Get Product entity (many to one).
     *
     * @return \ErpNET\App\Models\Doctrine\Entities\Product
     */
    public function getProduct()
    {
        return $this->product;
    }

    /**
     * Set SharedCurrency entity (many to one).
     *
     * @param \ErpNET\App\Models\Doctrine\Entities\SharedCurrency $sharedCurrency
     * @return \ErpNET\App\Models\Doctrine\Entities\ItemOrder
     */
    public function setSharedCurrency(SharedCurrency $sharedCurrency = null)
    {
        $this->sharedCurrency = $sharedCurrency;

        return $this;
    }

    /**
     * Get SharedCurrency entity (many to one).
     *
     * @return \ErpNET\App\Models\Doctrine\Entities\SharedCurrency
     */
    public function getSharedCurrency()
    {
        return $this->sharedCurrency;
    }

    public function __sleep()
    {
        return array('id', 'created_at', 'updated_at', 'deleted_at', 'mandante', 'order_id', 'cost_id', 'product_id', 'currency_id', 'quantidade', 'valor_unitario', 'desconto_unitario', 'descricao');
    }
}